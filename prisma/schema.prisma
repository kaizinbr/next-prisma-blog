generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Todo {
    id        Int      @id @default(autoincrement())
    title     String
    completed Boolean  @default(false)
    createdAt DateTime @default(now())
}

model User {
    id            String    @id @default(cuid())
    name          String?
    username      String    @unique
    password      String
    email         String?   @unique
    emailVerified DateTime? @map("email_verified")
    createdAt     DateTime  @default(now()) @map(name: "created_at")
    updatedAt     DateTime  @updatedAt @map(name: "updated_at")
    posts         Post[]
    accounts      Account[]
    sessions      Session[]
    postId        String?
    Profile       Profile?

    @@map(name: "users")
}

model Profile {
    id       String  @id @default(cuid())
    bio      String?
    name     String? @map("name")
    image    String? @default("/static/images/default.webp") @map("image")
    color    String? @default("#59656F")
    user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId   String  @unique
    liked    Post[]
    pronouns String?
}

model Post {
    id         String     @id @default(cuid())
    slug       String     @unique
    title      String?
    subtitle   String?
    json       Json?
    html       String?
    images     String[]
    tags       String[]
    serifed    Boolean    @default(false)
    published  Boolean    @default(false)
    author     User?      @relation(fields: [authorId], references: [id], onDelete: Cascade)
    authorId   String?
    authorName String?
    categories Category[]
    likes      Int?       @default(0)
    likedBy    Profile[]
    createdAt  DateTime   @default(now()) @map(name: "created_at")
    updatedAt  DateTime   @updatedAt @map(name: "updated_at")
    deletedAt  DateTime?  @map(name: "deleted_at")
    deleted    Boolean    @default(false)
    blocked    Boolean    @default(false)
}

model Img {
    id        Int      @id @default(autoincrement())
    url       String
    alt       String
    subtitle  String?
    author    String?
    createdAt DateTime @default(now())
}

model Account {
    id                 String  @id @default(cuid())
    userId             String  @map("user_id")
    type               String
    provider           String
    providerAccountId  String  @map("provider_account_id")
    refresh_token      String?
    access_token       String?
    expires_at         Int?
    token_type         String?
    scope              String?
    id_token           String?
    session_state      String?
    oauth_token_secret String?
    oauth_token        String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique @map("session_token")
    userId       String   @map("user_id")
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

model Category {
    id    Int    @id @default(autoincrement())
    name  String
    posts Post[]
}

model Image {
    id        Int      @id @default(autoincrement())
    blob      Bytes
    createdAt DateTime @default(now())
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map("verificationtokens")
}
