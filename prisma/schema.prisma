generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Todo {
    id        Int      @id @default(autoincrement())
    title     String
    completed Boolean  @default(false)
    createdAt DateTime @default(now())
}

model User {
    id            String        @id @default(cuid())
    name          String?
    username      String        @unique
    password      String
    email         String?       @unique
    emailVerified DateTime?     @map("email_verified")
    createdAt     DateTime      @default(now()) @map(name: "created_at")
    updatedAt     DateTime      @updatedAt @map(name: "updated_at")
    posts         Post[]        @relation("author")
    LikesByUser   LikesByUser[]
    accounts      Account[]
    sessions      Session[]
    postId        String?
    Profile       Profile?
    following     Follower[]    @relation("UserFollows")
    followers     Follower[]    @relation("UserFollowedBy")
    blocking      Block[]       @relation("UserBlocks")
    blocks        Block[]       @relation("UserBlockedBy")

    @@map(name: "users")
}

model Follower {
    id         String   @id @default(cuid())
    followedAt DateTime @default(now())

    Seguidor   User   @relation("UserFollows", fields: [userId], references: [id])
    Seguindo   User   @relation("UserFollowedBy", fields: [followerId], references: [id])
    userId     String
    followerId String
}

model Block {
    id        String   @id @default(cuid())
    blockedAt DateTime @default(now())

    blocker   User   @relation("UserBlocks", fields: [userId], references: [id])
    blocked   User   @relation("UserBlockedBy", fields: [blockedId], references: [id])
    userId    String
    blockedId String

    @@map("blocks")
}

model Profile {
    id       String  @id @default(cuid())
    bio      String?
    name     String? @map("name")
    image    String? @default("/static/images/default.webp") @map("image")
    color    String? @default("#59656F")
    user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId   String  @unique
    pronouns String?
}

model LikesByUser {
    id     String @id @default(cuid())
    userId String
    post   Post   @relation(fields: [postId], references: [id])
    postId String
    User   User   @relation(fields: [userId], references: [id])

    // @@id([userId, postId])
}

model Post {
    id          String        @id @default(cuid())
    content     String?
    images      Img[]         @relation("PostImages")
    isRepost    Boolean       @default(false)
    reposted    Post?         @relation("reposts", fields: [repostedId], references: [id])
    reposts     Post[]        @relation("reposts")
    repostedId  String?
    author      User?         @relation("author", fields: [authorId], references: [id], onDelete: Cascade)
    authorId    String?
    authorName  String?
    createdAt   DateTime      @default(now()) @map(name: "created_at")
    updatedAt   DateTime      @updatedAt @map(name: "updated_at")
    blocked     Boolean       @default(false)
    likesCount  Int           @default(0)
    LikesByUser LikesByUser[]
    userId      String?
    comments    Post[]        @relation("comments")
    responseId  String?
    responseTo  Post?         @relation("comments", fields: [responseId], references: [id])
}

model Img {
    id        String      @id @default(cuid())
    url       String
    alt       String
    subtitle  String?
    author    String?
    postId    String?
    Post      Post?     @relation("PostImages", fields: [postId], references: [id])
    createdAt DateTime @default(now())
}

model Account {
    id                 String  @id @default(cuid())
    userId             String  @map("user_id")
    type               String
    provider           String
    providerAccountId  String  @map("provider_account_id")
    refresh_token      String?
    access_token       String?
    expires_at         Int?
    token_type         String?
    scope              String?
    id_token           String?
    session_state      String?
    oauth_token_secret String?
    oauth_token        String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique @map("session_token")
    userId       String   @map("user_id")
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

model Image {
    id        Int      @id @default(autoincrement())
    blob      Bytes
    createdAt DateTime @default(now())
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map("verificationtokens")
}
